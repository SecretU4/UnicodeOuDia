/*
	OuDia - Win32 Application Software to draw a "Train Service Planning
 Diagram" based on a "Train Timetable".

Copyright (C) 2006-2017 take-okm

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the Free 
Software Foundation; either version 3 of the License, or (at your option) 
any later version. 

This program is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
more details. 

You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.

  In addition, as a special exception, take-okm
  gives permission to link the code of this program with
  the "MFC(Microsoft Foundation Class library) Version 9.0" 
  (or with modified versions of "MFC Version 9.0" that use the same license as 
  "MFC Version 9.0" ), and distribute linked combinations including
  the two.  You must obey the GNU General Public License in all
  respects for all of the code used other than  "MFC".  If you modify
  this file, you may extend this exception to your version of the
  file, but you are not obligated to do so.  If you do not wish to
  do so, delete this exception statement from your version.


(訳: 

	OuDia - 列車時刻表をもとに、ダイヤグラムを描画するWin32アプリケーシ
ョン。

Copyright (C) 2006-2017 take-okm 

このプログラムはフリーソフトウェアです。あなたはこれを、フリーソフトウェア財
団によって発行されたGNU 一般公衆利用許諾書(バージョン3か、それ以降のバージョ
ンのうちどれか)が定める条件の下で再頒布または改変 することができます。

このプログラムは有用であることを願って頒布されますが、*全くの無保証 *です。
商業可能性の保証や特定目的への適合性は、言外に示されたものも 含め、全く存在
しません。詳しくはGNU 一般公衆利用許諾書をご覧ください。

あなたはこのプログラムと共に、GNU 一般公衆利用許諾書のコピーを一部 受け取っ
ているはずです。もし受け取っていなければ、<http://www.gnu.org/licenses/> を
ご覧ください。

)

  加えて、特別な例外として、take-okm はこのプログラムのコードを 
  "MFC(Microsoft Foundation Class library) Version 9.0" 
  (  あるいは "MFC Version 9.0" と同じライセンスが適用された
  "MFC Version 9.0" の改変されたバージョン)とリンクし、
  リンクされた両者を含む結合著作物を頒布する許可を与えます。
  あなたは "MFC" 以外で使われているすべて
  のコードに関しては全面的にGNU一般公衆利用許諾契約書に従わなければ
  なりません。あなたがこのファイルを改変したならば、あなたはこの例外
  をあなたのバージョンのファイルに引き続き設けることもできますが、そ
  うする義務はありません。もし例外を設けたくなければ、この例外条項を
  あなたのバージョンからは削除してください。)
*/
//$Id: NsOu.h 351 2016-08-16 19:55:36Z okm $
/**
 @file 
 @brief
	名前空間の関数群・クラス群のすべてをインクルードします。
*/



namespace OuLib{

#ifndef NO_NSOU
/**
@brief
Ou に関連するクラスが属する名前空間です。
Ou は、オブジェクトの寿命管理を行うスマートポインタです。

@ref page_oumodel

*/
namespace NsOu{
}


/** @page page_oumodel Ouモデル 
 Ou< TargetType > は、TargetType 型のオブジェクトを参照する、
スマートポインタです。

  Ou< TargetType > が指している TargetType 型のオブジェクトのことを、
『（Ou の）ターゲットオブジェクト』と呼称します。
  Ou は、『ターゲットオブジェクト』の参照を終了するときに、
自動的に『ターゲットオブジェクト』の後始末（削除）
を行う仕組みを持っています。

 「『ターゲットオブジェクト』の参照を終了するとき」は、具体的には

 -	Ou自身が破棄されるとき（デストラクタ）
 -	Ouに、他の『ターゲットオブジェクト』への参照(Ou)を開始するとき（代入）
 -	Ou.clear() を呼び出したとき。

といった場合を指します。

  『ターゲットオブジェクト』が、複数の Ou から参照される場合があります。
  Ou ではこの場合、『ターゲットオブジェクト』を参照している Ou の
数をカウントし、これが 0 になったときに、『ターゲットオブジェクト』の
後始末（削除）を行います。 

  この管理をおこなうため、Ouでは『ターゲットオブジェクト』１つにつき１つの
『ホルダーオブジェクト( OuHolder< TargetType > ) 』を生成・管理します。

『ホルダーオブジェクト』は、

 - 『ターゲットオブジェクト』へのポインタ
 - 『ターゲットオブジェクト』を参照している Ou の数（参照カウンタ)

を保持しています。『ホルダーオブジェクト』は、参照カウンタが０になった
ときに、自分自身（『ホルダーオブジェクト』）と『ターゲットオブジェクト』
を削除します。

  Ou は、ターゲットオブジェクトの後始末の方法毎に、派生クラスを持ってい
ます。標準の派生クラスとしては

 - 1.  new で生成されたオブジェクトを保持する  OuNew 
 (ターゲットオブジェクトを delete で削除する)
 - 2.  静的な寿命を持つオブジェクトを保持する OuStatic 
（ターゲットオブジェクトの削除は行わない）

がありますが、これ以外の破棄方法を持つクラスを独自に作成することも可能
です。

<H4>
使い方
</H4>
  new でオブジェクトを生成するときには、newで生成したオブジェクトのアドレスを、 OuNew のコンストラクタに渡してください。
  これ以後は、OuNew スマートポインタに -> 演算子を使って、オブジェクトのメンバーにアクセスすることが出来ます。

@code
	OuNew<CBase>	pBase( new CBase ) ;
	pBase->AgeSet( 30 ) ;
@endcode

  オブジェクトへの新たな参照を生成する場合は、 Ou を生成し、 Ou にスマートポインタを代入してください。

@code
	Ou<CBase>	pBase2 = pBase ;
@endcode


  関数の引数を使って、オブジェクトへのスマートポインタを関数に渡したい場合は、
 Ou を引数にしてください。

@code
void func( Ou<CBase> arg )
{
	arg->AgeSet( 31 ) ;
}
@endcode

  関数の戻り値を使って、オブジェクトのスマートポインタを渡したい場合は、 Ou を戻り値にしてください。

@code
Ou< CBase > BaseCreateFunc()
{
	OuNew< CBase >	pBase( new CBase() ) ;
	return ( pBase ) ;
}

	Ou<CBase> pBase = BaseCreateFunc() ;

@endcode


*/

#endif //NO_NSOU


} //namespace OuLib


#include "NsOu\dynamic_castOu.h"
#include "NsOu\Ou.h"
#include "NsOu\OuBase.h"
#include "NsOu\OuHolder.h"
#include "NsOu\OuHolderBase.h"
#include "NsOu\OuNew.h"
#include "NsOu\OuStatic.h"

